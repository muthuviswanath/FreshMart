// <auto-generated />
using System;
using FreshMart.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace FreshMart.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20220610112652_AddingOrders")]
    partial class AddingOrders
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("FreshMart.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CategoryDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CategoryName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            CategoryDescription = "Computer and Electronics",
                            CategoryName = "Electronics"
                        },
                        new
                        {
                            CategoryId = 2,
                            CategoryDescription = "Home Appliances",
                            CategoryName = "Home Appliances"
                        },
                        new
                        {
                            CategoryId = 3,
                            CategoryDescription = "Stationaries",
                            CategoryName = "Stationaries"
                        },
                        new
                        {
                            CategoryId = 4,
                            CategoryDescription = "Groceries",
                            CategoryName = "Groceries"
                        },
                        new
                        {
                            CategoryId = 5,
                            CategoryDescription = "Men Grroming",
                            CategoryName = "Grooming"
                        });
                });

            modelBuilder.Entity("FreshMart.Models.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<DateTime>("OrderPlaced")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("OrderTotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PinCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OrderId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("FreshMart.Models.OrderDetail", b =>
                {
                    b.Property<int>("OrderDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("OrderDetailId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("FreshMart.Models.Products", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageThumbnailUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsInStock")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOnSale")
                        .HasColumnType("bit");

                    b.Property<string>("ProductName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ProductId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Prodcts");

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            CategoryId = 1,
                            Description = "Logitech Wireless Mouse",
                            ImageThumbnailUrl = "~/images/thumbnails/mouse1.png",
                            ImageUrl = "~/images/thumbnails/mouse1.png",
                            IsInStock = true,
                            IsOnSale = true,
                            ProductName = "Mouse",
                            price = 256.56m
                        },
                        new
                        {
                            ProductId = 2,
                            CategoryId = 2,
                            Description = "Double Door LG Refredgerator",
                            ImageThumbnailUrl = "~/images/thumbnails/fridge1.png",
                            ImageUrl = "~/images/thumbnails/fridge1.png",
                            IsInStock = true,
                            IsOnSale = true,
                            ProductName = "Refridgerator",
                            price = 256.56m
                        },
                        new
                        {
                            ProductId = 3,
                            CategoryId = 3,
                            Description = "Parker Special Edition",
                            ImageThumbnailUrl = "~/images/thumbnails/parker1.png",
                            ImageUrl = "~/images/thumbnails/parker1.png",
                            IsInStock = true,
                            IsOnSale = true,
                            ProductName = "Parker Pen",
                            price = 256.56m
                        },
                        new
                        {
                            ProductId = 4,
                            CategoryId = 4,
                            Description = "Gold Winner Sunflower Oil",
                            ImageThumbnailUrl = "~/images/thumbnails/mouse1.png",
                            ImageUrl = "~/images/thumbnails/mouse1.png",
                            IsInStock = true,
                            IsOnSale = true,
                            ProductName = "Sunflower Oil",
                            price = 256.56m
                        },
                        new
                        {
                            ProductId = 5,
                            CategoryId = 1,
                            Description = "Gillete Shaving Cream",
                            ImageThumbnailUrl = "/images/thumbnails/mouse1.png",
                            ImageUrl = "/images/thumbnails/mouse1.png",
                            IsInStock = true,
                            IsOnSale = true,
                            ProductName = "Shaving Cream",
                            price = 256.56m
                        });
                });

            modelBuilder.Entity("FreshMart.Models.ShoppingCartItem", b =>
                {
                    b.Property<int>("ShoppingCartItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<int?>("ProductsProductId")
                        .HasColumnType("int");

                    b.Property<string>("ShoppingCartId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ShoppingCartItemId");

                    b.HasIndex("ProductsProductId");

                    b.ToTable("ShoppingCartItems");
                });

            modelBuilder.Entity("FreshMart.Models.OrderDetail", b =>
                {
                    b.HasOne("FreshMart.Models.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FreshMart.Models.Products", "Products")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("FreshMart.Models.Products", b =>
                {
                    b.HasOne("FreshMart.Models.Category", "Category")
                        .WithMany("ProductList")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("FreshMart.Models.ShoppingCartItem", b =>
                {
                    b.HasOne("FreshMart.Models.Products", "Products")
                        .WithMany()
                        .HasForeignKey("ProductsProductId");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("FreshMart.Models.Category", b =>
                {
                    b.Navigation("ProductList");
                });

            modelBuilder.Entity("FreshMart.Models.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
